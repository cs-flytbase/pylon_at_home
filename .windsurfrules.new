1. My framework is Next.js
2. Use TypeScript for all code
3. Use Tailwind CSS for styling
4. Use shadcn/ui for all components
5. Use Supabase for database and authentication
6. All React components should be created using shadcn/ui components
7. Follow the shadcn/ui component patterns for consistency
8. Use Supabase for data storage and user authentication
9. Use the sonner component if want to use toast

# Project Structure
10. Follow the Next.js App Router structure with src/app directory
11. Keep component files in src/components organized by feature or page
12. Store utility functions in src/lib/utils.ts
13. Keep services in src/lib/services directory
14. Maintain context providers in src/context directory
15. Store database migrations in supabase/migrations directory
16. Use a two-tier sidebar layout with IconSidebar and DetailsSidebar

# Database and Supabase
17. You have access to Supabase tools to create, modify, and query the database
18. The current database is a staging environment - feel free to make any changes necessary
19. Database tables are already set up for teams, WhatsApp integration, and conversations
20. Row Level Security (RLS) policies should be applied to all tables
21. Use SQL migrations for any database schema changes

# Features and Implementation Details
22. The app has WhatsApp integration using the Periskope API
23. Team management features are implemented, allowing users to create and join teams
24. A Kanban board with drag-and-drop functionality is implemented using @dnd-kit
25. The app uses a TeamProvider context for managing team state
26. All forms should use React Hook Form with Zod for validation

# Component Patterns
27. Use the PageTitle component for consistent page headers
28. Implement loading states for all async operations
29. Use shadcn/ui Form components for all forms
30. Follow TypeScript best practices and avoid any errors
